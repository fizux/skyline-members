#!/usr/bin/perl

	# Program that takes the database
	# and converts it into an excel spreadsheet.

main: {
  Init();
  print "Content-type: text/html\n\n";
  if ($q->param('keywords') eq 'verbose') {
    $verbose++;
    print "<html><head><title>Excel Spreadsheet Generation (verbose)</title>";
    include ("left-menu.scrap");
    print "<h1>Generating Excel Spreadsheet (verbose):</h1>\n";
    }
  else {
    print "<html><head><title>Excel Spreadsheet Generation</title>";
    include ("left-menu.scrap");
    print "<h1>Generating Excel Spreadsheet:</h1>\n";
    }

  write_excel();
  
  print <<EOM; 
<p>Excel Spreadsheet has been generated, with the most current 
information we have about everybody.</p>

<p>Download your Excel Spreadsheet now by following this link 
[ <a href = "/MEMBERSHIP/xls/$filename">Download</a> ]</p>

<p>Send notifications of membership information/changes to <a href
= "mailto:welcome\@skylinesoaring.org">welcome\@skylinesoaring.org</a></p>

<p>Send feedback about blown-up or scrappy-looking Excel Spreadsheets
to <a href ="mailto:pbarber\@skylinesoaring.org">pbarber\@skylinesoaring.org</a> </p>

<p><img src = "/MEMBERSHIP/Excel-snapshot.jpg" width ="430" height="309" 
alt = "Snapshot of Excel Spreadsheet"></p>


<p><i>For those of you who hate Microsoft and refuse to run their software,
this excel spreadsheet has been thoroughly tested and works great with 
<a href ="http://www.openoffice.org/">Open Office</a> and <a href =
"http://www.gnome.org/gnumeric/">Gnumeric</a></i></p>

EOM
  include ("footer.scrap");
  };

sub Init {
  $|++;
  use CGI;
  $q=new CGI;
  }


sub write_excel {

	# when you do a select * 
	# from the database, the information
	# is returned in this order. 

  @structure = (qw(
        handle          ssa_id
        firstname       lastname
        middleinitial   namesuffix
        official_title  rostername
        address1        address2
        city            state
        zip             country
        email           phone1
        phone2          director
        treasurer       secretary
        webmaster       instructor
        towpilot        dutyofficer
        ado             otherduties
        memberstatus    rating
        glider_owned    glider_owned2
        joindate        lastupdated
        md5_password    newsletter
        mailinglist     misc_list
        weekday_list    bio_online
	mugshot		public_notes
	private_notes	cell_phone
	));

  %memberstatus = (
        'M'     =>      'Standard',
        'F'     =>      "Founding",
        'P'     =>      'Probationary',
        'S'     =>      'Service',
        'H'     =>      'Honorary',
        'Q'     =>      'Family',
        'T'     =>      'Transient',
        'I'     =>      'Inactive',
        'E'     =>      'Temporary',
        'N'     =>      'Not a Member'
	);

	# Attempt to open up the database. 

  if (!$dbh) {
    use DBI;
    $driver = "DBI::Pg";
    $database = 'skyline';

    $dbh = DBI->connect("DBI:Pg:dbname=skyline")
	|| die ("Can't connect to database $!\n");
    }

	# Grab Module that writes
	# to excel files. 

  use Spreadsheet::WriteExcel;

	# Create excel spreadsheet named
	# excel2.xls

  $filename = time . '.xls';
  $workbook  = Spreadsheet::WriteExcel->new('/var/www/members/html/MEMBERSHIP/xls/' . $filename)
	|| die ("Can't write to excel spreadsheet!\n");

	# Add worksheet to the workbook.
  $worksheet = $workbook->addworksheet();
  $format = $workbook->addformat();

  $worksheet->write(0,0, 
	sprintf ("Generated by %s on %s",
		$ENV{REMOTE_USER}, scalar(localtime(time))));
  $worksheet->write (1,0, "Yellow blocks mean the member's record has been updated in past 30 days");

  generate('Active Members', qq[where (
	memberstatus = 'F' or
	memberstatus = 'M' or
	memberstatus = 'P' or
	memberstatus = 'H' or
	memberstatus = 'S' or
	memberstatus = 'Q') 
	order by lastname, firstname, handle]);

  generate('Inactive/Temporary/Transient Members', qq[where (
	memberstatus = 'T' or
	memberstatus = 'E' or
	memberstatus = 'I' or
	memberstatus = 'R') 
	order by lastname, firstname, handle]);
  
  $workbook->close();

  }

sub generate {
  local ($title, $sql, @answer, $count);
  $title = shift;
  $sql = shift;

  $get_info = $dbh->prepare("Select " .  
	(join ", ", @structure)  . 
	' from members ' . $sql);

  $get_info->execute();

  while ( @row = $get_info->fetchrow_array ) {
    $count=0;
    $handle = $row[0];
    push (@answer, $handle);
    for (@row) {
      $member{$handle}{$structure[$count]} = $row[$count];
      $count++;
      }
    }

  

  if (length(@answer)) {
	# Something to see, print title.

	# Set the width of the columns, 
	# format:  See Spreadsheet::WriteExcel manpage.

	# Leading empty column

    if ($verbose) {
	# Leading Column
      $worksheet->set_column(0,0,3);
	# Name
      $worksheet->set_column(1,1,21);
	# Glider Owned
      $worksheet->set_column(2,2,14);
	# Address
      $worksheet->set_column(3,3,23);
	# Phone numbers
      $worksheet->set_column(4,4,13);
      $worksheet->set_column(5,5,13);
      $worksheet->set_column(6,6,13);
	# Email address
      $worksheet->set_column(7,7,30);
	# Member Duties
      $worksheet->set_column(8,8,10);
	# Member Title
      $worksheet->set_column(9,9,18);
	# Member status
      $worksheet->set_column(10,10,15);
	# Join Date
      $worksheet->set_column(11,11,10);
	# SSA Number
      $worksheet->set_column(12,12,10);
	# Public-Notes
      $worksheet->set_column(13,13,30);
      }

    else {
      $worksheet->set_column(0,0,3);
	# Name
      $worksheet->set_column(1,1,21);
	# Address
      $worksheet->set_column(2,2,23);
	# Phone numbers
      $worksheet->set_column(3,3,13);
  	# Email address
      $worksheet->set_column(4,4,24,);
	# Member Duties
      $worksheet->set_column(5,5,8);
	# Member status
      $worksheet->set_column(7,7,12);
      }

    $rowno+=3;
    $colset=0;
	# Print the title of this category
	# two rows down, in the first column.
    $boldify = $workbook->addformat();
    $boldify->set_font("Arial Black");
    $boldify->set_size("14");
    $boldify->set_color('black');
    $boldify->set_fg_color('white');
    $boldify->set_bg_color('white');
    $boldify->set_pattern(1);
    $worksheet->write($rowno, $colset, 
	$title, $boldify);
    $rowno++;

    if ($verbose) {
      header('Name', 'Glider(s) owned', 'Address', 
             'Phone1', 'Phone2', 'Cell Phone', 'e-mail', 'Duties', 
             'Job Title', 'Membership Type', 'Joined Club', 'SSA Number', 
             'Notes');
      }
    else {
      header('Name', 'Address', 'Phone numbers', 'Email address', 'Member Duties', 'Job Title', 'Member status', 'Joined', 'SSA number');
      }
    $rowno++;
    }

  else {
    	# Nothing to see. Complain and skip.
    $worksheet->write($rowno, $colset, 
	"(No $title to view)");
    }

  for (@answer) {
    local(@duties, $highlight);
	# Change colset to change the offset.
	# (offset is how many left columns should be blank)
    $colset = 1;


    $highlight = $workbook->addformat();
    $highlight->set_text_wrap();

	# They get highlighted if they've been updated in the past 30 days. 
    if ($member{$_}{lastupdated} > (time - 2592000)) {
      $highlight->set_bg_color(43);
      $highlight->set_color('black');
      $highlight->set_fg_color(43);
      $highlight->set_pattern(1);
      $highlight->set_bold();
      }

    else {
      $highlight->set_bg_color('White');
      }

	# Print dude's name -- last name, first name middle suffix
    $worksheet->write($rowno, $colset++, 
	$member{$_}{lastname} . ', ' . 
	$member{$_}{firstname} . ' ' . 
	$member{$_}{middleinitial} . ' ' . 
	$member{$_}{namesuffix}, $highlight);


    if ($verbose) {
	# Print two gliders if they've got two. 
      if ($member{$_}{glider_owned2}) {
        $worksheet->write($rowno, $colset++, 
  	  $member{$_}{glider_owned} . ", \n" . 
  	  $member{$_}{glider_owned2}, $highlight);
        }
      else {
        $worksheet->write($rowno, $colset++, 
  	  $member{$_}{glider_owned}, $highlight);
        }
      }

	# Print address with lines 1 and 2
	# only if address line 2 exists.


    if ($member{$_}{address2}) {
      $worksheet->write($rowno, $colset++, 
	sprintf ("%s\n%s\n%s %s, %s", 
 	  $member{$_}{address1},
	  $member{$_}{address2},
	  $member{$_}{city},
	  $member{$_}{state},
	  $member{$_}{zip}
	  ), 
	$highlight
	);
      }

	# otherwise, print address 
	# with just line 1 (because line 2 doesn't exist)
    else {
      $worksheet->write($rowno, $colset++, 
	$member{$_}{address1} . "\n" .
	$member{$_}{city} . ', ' . 
	$member{$_}{state} . ' ' .
	$member{$_}{zip},
	$highlight
	);
      }

	# If dude has a second phone number
	# print number 1 and number 2.
    if (!$verbose) {
      if ($member{$_}{cell_phone} && $member{$_}{phone2}) {
        $worksheet->write($rowno, $colset++, 
  	  $member{$_}{phone1} . "\n" .
	  $member{$_}{phone2} . "\n" .
	  $member{$_}{cell_phone} . '(c)',
	  $highlight
	  );
        }

      elsif ($member{$_}{cell_phone}) {
        $worksheet->write($rowno, $colset++, 
  	  $member{$_}{phone1} . "\n" .
	  $member{$_}{cell_phone} . '(c)',
	  $highlight
	  );
        }

      elsif ($member{$_}{phone2}) {
        $worksheet->write($rowno, $colset++, 
  	  $member{$_}{phone1} . "\n" .
	  $member{$_}{phone2},
	  $highlight
	  );
        }

	# otherwise, just print phone 1.
      else {
        $worksheet->write($rowno, $colset++, 
  	  $member{$_}{phone1},
	  $highlight
	  );
        }
      }

    else {
      $worksheet->write($rowno, $colset++, 
	$member{$_}{phone1},
	$highlight
	);
      $worksheet->write($rowno, $colset++, 
	$member{$_}{phone2},
	$highlight
	);
      $worksheet->write($rowno, $colset++, 
	$member{$_}{cell_phone},
	$highlight
	);
      }


	# if dude has email, print it.
    if ($member{$_}{email}) {
      $worksheet->write($rowno, $colset++, 
	$member{$_}{email},
	$highlight
	);
      }

	# Otherwise, print none
    else {
      $worksheet->write($rowno, $colset++, 
	'none',
	$highlight);
      }

	# Assemble duties array, based
	# on what is true for dude. 

    $member{$_}{towpilot} && push (@duties, "Tow");
    $member{$_}{instructor} && push (@duties, "Inst");
    $member{$_}{dutyofficer} && push (@duties, "DO");
    $member{$_}{ado} && push (@duties, "ADO");
    $member{$_}{otherduties} && push (@duties,"Other");


	# If dude has duties, print them
	
    if (length(@duties)) {
      $worksheet->write($rowno, $colset++, 
	(join (", ", @duties)), $highlight);
      }

	# Otherwise print 'none'
    else {
      $worksheet->write($rowno, $colset++, 
	'none', $highlight);
      }

    $worksheet->write($rowno, $colset++, 
	$member{$_}{official_title}, $highlight);

	# Print the member's status (temporary, active, etc.)
    $worksheet->write($rowno, $colset++, 
	$memberstatus{$member{$_}{memberstatus}}, $highlight);


      $worksheet->write($rowno, $colset++, 
	$member{$_}{joindate}, $highlight);
      $worksheet->write($rowno, $colset++, 
	$member{$_}{ssa_id}, $highlight);
    if ($verbose) { 
      $worksheet->write($rowno, $colset++,
	$member{$_}{public_notes}, $highlight);
      }


    $rowno++;
    }
  }

sub header {
  $colset=1;
  $boldify = $workbook->addformat();
  $boldify->set_font("Arial Black");
  $boldify->set_size("10");
  $boldify->set_color('black');
  $boldify->set_fg_color('white');
  $boldify->set_bg_color('white');
  $boldify->set_pattern(1);
  $boldify->set_text_wrap();

  for $col_header (@_) {
    $worksheet->write($rowno, $colset++,
      $col_header, $boldify);
    }
  }

sub include {
  local($file) = shift;
  open (INCLUDE, "../INCLUDES/" . $file)
        || die ("Can't include left menu! $!\n");
  for (<INCLUDE>) {
    print;
    }
  close (INCLUDE);
  }
